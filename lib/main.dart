import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart'; // This file is generated by FlutterFire CLI

// Entry point: Initialize Firebase and run the app.
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}

// Root widget defines routes for the app.
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Auth Demo',
      initialRoute: '/',
      routes: {
        '/': (context) => AuthenticationScreen(),
        '/profile': (context) => ProfileScreen(),
      },
    );
  }
}

// A simple service class to wrap Firebase Authentication functions.
class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Create a new user using email and password.
  Future<UserCredential?> signUp({
    required String email,
    required String password,
  }) async {
    try {
      UserCredential userCredential =
          await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      return userCredential;
    } catch (e) {
      print("SignUp Error: $e");
      return null;
    }
  }

  // Sign in an existing user using email and password.
  Future<UserCredential?> signIn({
    required String email,
    required String password,
  }) async {
    try {
      UserCredential userCredential =
          await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      return userCredential;
    } catch (e) {
      print("SignIn Error: $e");
      return null;
    }
  }

  // Sign out the current user.
  Future<void> signOut() async {
    await _auth.signOut();
  }

  // Update the password for the currently logged-in user.
  Future<bool> updatePassword(String newPassword) async {
    try {
      User? user = _auth.currentUser;
      if (user != null) {
        await user.updatePassword(newPassword);
        return true;
      }
      return false;
    } catch (e) {
      print("UpdatePassword Error: $e");
      return false;
    }
  }

  // Get the current user.
  User? get currentUser => _auth.currentUser;
}

// Screen that handles both registration and sign-in.
class AuthenticationScreen extends StatefulWidget {
  @override
  _AuthenticationScreenState createState() => _AuthenticationScreenState();
}

class _AuthenticationScreenState extends State<AuthenticationScreen> {
  bool showSignIn = true; // Toggle between sign in and registration.
  final AuthService _authService = AuthService();
  final _formKey = GlobalKey<FormState>();

  // Controllers for email and password text fields.
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  // Status message to provide feedback to the user.
  String _statusMessage = '';

  // Toggle between registration and sign in forms.
  void _toggleForm() {
    setState(() {
      showSignIn = !showSignIn;
      _statusMessage = '';
    });
  }

  // Form submission for registration or sign in.
  void _submit() async {
    if (_formKey.currentState!.validate()) {
      String email = _emailController.text.trim();
      String password = _passwordController.text.trim();
      UserCredential? result;

      if (showSignIn) {
        result = await _authService.signIn(email: email, password: password);
      } else {
        result = await _authService.signUp(email: email, password: password);
      }

      if (result != null) {
        // On success, navigate to the Profile screen.
        Navigator.pushReplacementNamed(context, '/profile');
      } else {
        setState(() {
          _statusMessage =
              showSignIn ? 'Sign in failed' : 'Registration failed';
        });
      }
    }
  }

  // Basic email validation.
  String? _validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter an email';
    }
    if (!value.contains('@')) {
      return 'Enter a valid email';
    }
    return null;
  }

  // Basic password validation (6 characters minimum).
  String? _validatePassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter a password';
    }
    if (value.length < 6) {
      return 'Password must be at least 6 characters';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Auth Demo'),
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                showSignIn ? 'Sign In' : 'Register',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(labelText: 'Email'),
                validator: _validateEmail,
              ),
              SizedBox(height: 10),
              TextFormField(
                controller: _passwordController,
                obscureText: true,
                decoration: InputDecoration(labelText: 'Password'),
                validator: _validatePassword,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submit,
                child: Text(showSignIn ? 'Sign In' : 'Register'),
              ),
              TextButton(
                onPressed: _toggleForm,
                child: Text(showSignIn
                    ? 'Don\'t have an account? Register'
                    : 'Have an account? Sign In'),
              ),
              SizedBox(height: 20),
              Text(
                _statusMessage,
                style: TextStyle(color: Colors.red),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Profile screen that is shown after a successful sign in or registration.
class ProfileScreen extends StatelessWidget {
  final AuthService _authService = AuthService();
  final TextEditingController _passwordController = TextEditingController();

  // Helper function to display a dialog for changing the password.
  void _changePassword(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Change Password'),
          content: TextField(
            controller: _passwordController,
            decoration: InputDecoration(labelText: 'New Password'),
            obscureText: true,
          ),
          actions: [
            TextButton(
              onPressed: () async {
                if (_passwordController.text.length < 6) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                          'Password must be at least 6 characters'),
                    ),
                  );
                  return;
                }
                bool result = await _authService
                    .updatePassword(_passwordController.text);
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(result
                        ? 'Password updated successfully'
                        : 'Password update failed'),
                  ),
                );
              },
              child: Text('Update'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            )
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    User? user = _authService.currentUser;
    return Scaffold(
      appBar: AppBar(
        title: Text('Profile'),
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: () async {
              await _authService.signOut();
              Navigator.pushReplacementNamed(context, '/');
            },
          )
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Logged in as: ${user?.email ?? 'No user found'}',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _changePassword(context),
              child: Text('Change Password'),
            )
          ],
        ),
      ),
    );
  }
}
